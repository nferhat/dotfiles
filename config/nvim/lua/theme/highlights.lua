local C = require "theme.colors"

local ENABLE_BG = vim.g.cmp_with_bg
local function cmp_bg(col)
    return ENABLE_BG and col or nil
end

return {
    -- base neovim tui highlights
    normal = { fg = C.foreground, bg = "none" },
    normalfloat = { fg = C.foreground, bg = C.dark_background },
    floatborder = { bg = C.dark_background, fg = C.border },
    cold = { bold = true },
    debug = { fg = C.color1, bold = true },
    directory = C.color4,
    error = { link = "debug" },
    errormsg = { link = "debug" },
    exception = { link = "debug" },
    foldcolumn = { fg = C.color6, bg = C.color0 },
    folded = { fg = C.comment, bg = C.color0 },
    incsearch = { fg = C.color0, bg = C.color3 },
    italic = { bold = false, italic = true, underline = false },
    matchparen = { bg = C.comment, bold = true },
    modemsg = { fg = C.color6, bold = true },
    moremsg = { fg = C.color6, bold = true },
    question = { fg = C.color4, bold = true },
    search = { fg = C.color0, bg = C.color3 },
    substitute = { fg = C.color0, bg = C.color3 },
    specialkey = { fg = C.comment, italic = true },
    toolong = { fg = C.color1 },
    underlined = { bold = false, italic = false, underline = true },
    visual = { bg = C.selection },
    visualnos = { link = "visual" },
    warningmsg = { fg = C.color3, bold = true },
    wildmenu = { fg = C.color6, bg = C.selection, bold = true },
    title = C.color4,
    conceal = { fg = C.color4, bg = "none", bold = true },
    cursor = { fg = C.color3, bg = C.foreground },
    nontext = C.comment,
    linenr = { fg = C.comment:darken(1), bg = "none" },
    signcolumn = { fg = C.comment, bg = "none", sp = "none" }, -- match normal hl grou.
    vertsplit = { bg = "none", fg = C.border },
    winseparator = { link = "vertsplit" },
    colorcolumn = { bg = C.color0 },
    cursorcolumn = { bg = "none" },
    cursorline = {},
    cursorlinesign = { bg = "none" },
    cursorlinenr = { fg = C.color4, bold = true },
    quickfixline = { bg = C.color0 },
    pmenu = { fg = C.color7, bg = C.light_background },
    pmenusbar = { fg = C.light_background, bg = C.light_background },
    pmenusel = { fg = C.color4, bg = C.selection, bold = true }, -- not following base16
    pmenuthumb = { fg = C.color0, bg = C.color0 },
    tabline = { fg = C.comment, bg = C.light_background },
    tablinefill = { fg = C.color8, bg = C.light_background },
    tablinesel = { fg = C.color7, bg = "none", bold = true },

    -- neovim's regex syntax highlight
    boolean = C.color3,
    character = { fg = C.color1, bold = true },
    comment = C.comment,
    condition = C.color5,
    constant = C.color3,
    define = C.color5,
    delimiter = C.color1,
    float = C.color3,
    ["function"] = C.color4,
    identifier = C.color1,
    include = C.color4,
    keyword = { fg = C.color5, italic = true },
    label = C.color3,
    number = C.color3,
    operator = C.color7,
    preproc = C.color3,
    ["repeat"] = { fg = C.color3, italic = true },
    special = C.color6,
    specialchar = { link = "character" },
    statement = C.color5,
    string = C.color2,
    structure = { fg = C.color5, italic = true },
    tag = C.color3,
    todo = C.color4,
    type = { fg = C.color3, bold = true },
    typedef = { link = "type" },

    -- diff syntax highlighting
    diffadd = { fg = C.color2, bg = C.color0 },
    diffchange = { fg = C.color6, bg = C.color0 },
    diffdelete = { fg = C.color1, bg = C.color0 },
    difftext = { fg = C.color4, bg = C.color0 },
    diffadded = C.color2,
    difffile = C.color1,
    diffnewfile = C.color2,
    diffline = C.color4,
    diffremoved = C.color1,

    -- spell
    spellbad = { underline = true, sp = C.color1 },
    spellcap = { underline = true, sp = C.color4 },
    spellrare = { underline = true, sp = C.color5 },
    spelllocal = { underline = true, sp = C.color6 },

    -- lsp
    LspInlayHint = C.comment:darken(0.25),

    -- diagnostics
    DiagnosticError = { fg = C.color1, bold = false },
    DiagnosticWarn = { fg = C.color11:darken(3), bold = false },
    DiagnosticInfo = { fg = C.color4, bold = false },
    DiagnosticHint = { fg = C.comment, bold = false },
    DiagnosticVirtualTextError = { bg = C.light_background:increase_red(4), fg = C.color1, bold = true },
    DiagnosticVirtualTextWarn = {
        bg = C.light_background:increase_red(4):increase_green(4),
        fg = C.color3,
        bold = true,
    },
    DiagnosticVirtualTextInfo = { bg = C.light_background:increase_blue(4), fg = C.color4, bold = true },
    DiagnosticVirtualTextHint = { bg = C.light_background, fg = C.comment, bold = false },
    DiagnosticUnderlineError = { sp = C.color1, undercurl = true },
    DiagnosticUnderlineWarn = { sp = C.color3, undercurl = true },
    DiagnosticUnderlineInfo = { sp = C.color4, undercurl = true },
    DiagnosticUnderlineHint = { sp = C.comment, undercurl = false },

    -- Statusline, since its included with the config (not a plugin)
    StatusLine = { bg = C.dark_background, fg = C.foreground },
    StatusLineNC = { bg = C.dark_background, fg = C.foreground },
    StatusLine_mode_Normal = { fg = C.color1, bg = C.dark_background:brighten(0.5) },
    StatusLine_mode_Insert = { fg = C.color2, bg = C.dark_background:brighten(0.5) },
    Statusline_mode_Terminal = { fg = C.color1, bg = C.dark_background:brighten(0.5) },
    Statusline_mode_Visual = { fg = C.color4, bg = C.dark_background:brighten(0.5) },
    Statusline_mode_Select = { fg = C.color3, bg = C.dark_background:brighten(0.5) },
    Statusline_mode_Command = { fg = C.color5, bg = C.dark_background:brighten(0.5) },
    Statusline_mode_Confirm = { fg = C.color6, bg = C.dark_background:brighten(0.5) },
    Statusline_mode_NTerminal = { link = "Statusline_mode_term", bold = true },
    -- Filetype section
    Statusline_filetype_default = { bg = C.dark_background, fg = C.color1 },
    Statusline_filetype_name = { bg = C.dark_background, fg = C.foreground },
    -- Filename section
    Statusline_filename_normal = { bg = C.dark_background, fg = C.foreground },
    Statusline_filename_modified = { bg = C.dark_background, fg = C.color4 },
    Statusline_filename_readonly = { bg = C.dark_background, fg = C.color1 },
    -- LSP clients section
    Statusline_lspclients = { bg = C.dark_background, fg = C.color6, italic = true },
    -- current macro section
    Statusline_macro = { bg = C.dark_background, fg = C.color3, bold = true },
    -- Separator
    Statusline_separator = { bg = C.dark_background, fg = C.border },
    -- Git section
    Statusline_git_branch_icon = { bg = C.dark_background, fg = C.color5 },
    Statusline_git_diff_added = { bg = C.dark_background, fg = C.color2 },
    Statusline_git_diff_changed = { bg = C.dark_background, fg = C.color4 },
    Statusline_git_diff_removed = { bg = C.dark_background, fg = C.color1 },
    -- Diagnostics section
    Statusline_diagnostic_error = { fg = C.color1, bold = true, bg = C.dark_background },
    Statusline_diagnostic_warn = { fg = C.color3, bold = true, bg = C.dark_background },
    Statusline_diagnostic_info = { fg = C.color4, bold = true, bg = C.dark_background },
    Statusline_diagnostic_hint = { fg = C.comment, bold = false, bg = C.dark_background },
    -- Other filler
    Statusline_misc_text = { bg = C.dark_background, fg = C.comment, italic = false },
    Statusline_text = { bg = C.dark_background, fg = C.foreground },
    -- Line and column
    Statusline_linecol = { bg = C.dark_background:brighten(1.2), fg = C.foreground },

    -- renamer, see lua/renamer
    RenamerTitle = { bg = C.color2, fg = C.color0 },

    -- tree-sitter is now included with neovim, aswell as some parsers
    -- make the highlights for syntax nodes in the base skeleton
    ["@boolean"] = C.color3,
    ["@character"] = { fg = C.color1, bold = true },
    ["@character.special"] = C.color6,
    ["@comment"] = { fg = C.comment, italic = true },
    ["@conditional"] = C.color5,
    ["@constant"] = { fg = C.color3, italic = false },
    ["@constant.builtin"] = C.color3,
    ["@constant.macro"] = C.color1,
    ["@constructor"] = C.color3,
    ["@debug"] = C.color1,
    ["@define"] = C.color5,
    ["@exception"] = { link = "Exception" },
    ["@field"] = C.foreground,
    ["@float"] = { link = "Float" },
    ["@function"] = C.color4,
    ["@function.builtin"] = C.color4,
    ["@function.macro"] = C.color1,
    ["@include"] = { link = "Include" },
    ["@keyword"] = { fg = C.color5, italic = false },
    -- Special case for rust &mut
    ["@keyword.modifier.rust"] = { fg = C.color3, italic = false },
    ["@label"] = C.color3,
    ["@macro"] = C.color1,
    ["@module"] = C.color1,
    ["@method"] = { link = "@function" },
    ["@namespace"] = C.color1,
    ["@number"] = C.color3,
    ["@operator"] = C.color1,
    ["@parameter"] = { fg = C.foreground, italic = true },
    ["@preproc"] = C.color3,
    ["@property"] = C.foreground,
    ["@punctuation"] = C.color1,
    ["@punctuation.special"] = C.color1,
    ["@repeat"] = { fg = C.color3, italic = false },
    ["@storageclass"] = { fg = C.color3, italic = true },
    ["@string"] = C.color2,
    ["@string.escape"] = C.color4,
    ["@string.special"] = { fg = C.color6, bold = true },
    ["@tag"] = C.color3,
    ["@text.title"] = C.color6,
    ["@text.todo"] = C.color4,
    ["@text.reference"] = C.color5,
    ["@text.uri"] = C.color4,
    ["@type"] = { fg = C.color11, italic = false },
    ["@type.builtin"] = { fg = C.color3, italic = false },
    ["@type.definition"] = { link = "@type" },
    ["@variable"] = C.foreground,
    -- Markdown
    ["@markup.raw"] = C.color7,
    ["@markup.link.label"] = C.color4,
    ["@markup.link.url"] = C.color9,

    -- indent-blankline.nvim
    IndentGuide = C.border:brighten(1.5),
    IndentGuideScope = C.border:brighten(3.5),

    -- gitsigns.nvim
    GitSignsAdd = C.color2,
    GitSignsChange = C.color4,
    GitSignsChangeDelete = C.color1,
    GitSignsDelete = C.color1,
    GitSignsTopDelete = C.color9,
    GitSignsUntracked = C.comment,

    -- telescope.nvim
    TelescopeNormal = { fg = C.foreground, bg = "none" },
    TelescopeBorder = { fg = C.border, bg = "none" },
    TelescopeSelection = { bg = C.color8:decrease_green(0.5), fg = C.color4, bold = true },
    TelescopeSelectionCaret = { bg = C.selection, fg = C.color4 },
    TelescopeMatching = { fg = C.color9, bold = true, italic = false },
    TelescopeMultiIcon = { fg = C.color1, bold = true },
    TelescopeMultiSelection = { fg = C.color3, bold = true },
    TelescopePromptCounter = C.comment,
    TelescopePreviewMessageFillchar = C.comment,
    TelescopePreviewMessage = { fg = C.color7, bold = true },

    -- blink.cmp
    BlinkCmpMenu = { bg = C.light_background },
    BlinkCmpMenuBorder = { link = "BlinkCmpMenu" },
    BlinkCmpLabelDetail = { bg = C.light_background, fg = C.comment:darken(5) },
    BlinkCmpLabel = C.foreground,
    BlinkCmpScrollBarThumb = { bg = C.border },
    BlinkCmpScrollBarGutter = { link = "BlinkCmpMenu" },
    BlinkCmpMenuSelection = { bold = true, bg = C.light_background:darken(2) },
    BlinkCmpLabelDeprecated = { strikethrough = true },
    BlinkCmpLabelMatch = C.color4,
    -- Client item kinds, the following are builtin to cmp.
    CmpItemAbbrDeprecated = { fg = C.color7, strikethrough = true },
    CmpItemAbbrMatchFuzzy = { link = "CmpItemAbbrMatch" },
    CmpItemAbbrMatch = { fg = C.color4, bold = true },
    BlinkCmpKindSnippet = { fg = C.color2, bg = cmp_bg(C.dark_background:increase_green(4)) },
    BlinkCmpKindConstant = {
        fg = C.color3,
        bg = cmp_bg(C.dark_background:increase_red(6):increase_green(4):brighten(4)),
    },
    BlinkCmpKindConstructor = C.color4,
    BlinkCmpKindEnum = { link = "BlinkCmpKindConstant" },
    BlinkCmpKindEnumMember = { link = "BlinkCmpKindConstant" },
    BlinkCmpKindEvent = { fg = C.color1, bg = cmp_bg(C.dark_background:increase_red(4)) },
    BlinkCmpKindInterface = { link = "BlinkCmpKindConstant" },
    BlinkCmpKindKeyword = { fg = C.color5, bg = cmp_bg(C.dark_background:increase_red(6):increase_blue(6)) },
    BlinkCmpKindClass = { link = "BlinkCmpKindConstant" },
    BlinkCmpKindModule = { link = "BlinkCmpKindEvent" },
    BlinkCmpKindOperator = C.comment,
    BlinkCmpKindTypeParameter = { link = "BlinkCmpKindConstant" },
    BlinkCmpKindUnit = { link = "BlinkCmpKindSnippet" },
    BlinkCmpKindField = { fg = C.color6, bg = cmp_bg(C.dark_background:increase_green(4):increase_blue(4):brighten(4)) },
    BlinkCmpKindVariable = { link = "BlinkCmpKindField" },
    BlinkCmpKindText = { fg = C.comment, bg = cmp_bg(C.light_background:darken(1)) },
    BlinkCmpKindFunction = { fg = C.color4, bg = cmp_bg(C.dark_background:increase_blue(2):brighten(4)) },
    BlinkCmpKindMethod = { link = "BlinkCmpKindFunction" },
    BlinkCmpKindProperty = { link = "BlinkCmpKindKeyword" },
    BlinkCmpKindFolder = { fg = "#f1d068" },
    BlinkCmpKindFile = { link = "BlinkCmpKindEvent" },
    BlinkCmpKindStruct = { link = "BlinkCmpKindConstant" },

    -- mini.clue
    MiniClueDescSingle = { bg = C.dark_background, fg = C.color4 },
    MiniClueDescGroup = { bg = C.dark_background, fg = C.color12, bold = true },
    MiniClueNextKey = { bg = C.dark_background, fg = C.color5 },
    MiniClueNextKeyWithPostkeys = { link = "MiniClueNextKey" },
    MiniClueSeparator = { bg = C.dark_background, fg = C.border },
    MiniClueTitle = { bg = C.dark_background, fg = C.color4, bold = true },
    MiniClueBorder = { link = "FloatBorder" },
}
