material-colors-generator: {
  config,
  lib,
  pkgs,
  ...
} @ args:
with lib; let
  cfg = config.theme;
  osCfg = args.osConfig.theme or {};

  themeVariables = import (./. + "/themes/${cfg.name}.nix");

  pkg = material-colors-generator.packages."${pkgs.system}".default;
  materialColorsPkg = pkgs.runCommandLocal "material-colors-generator" {} ''
    mkdir -p $out && cd $out
    ${pkg}/bin/material-colors-generator \
        image ${cfg.wallpaper} \
        --mode ${cfg.material.mode} \
        --palette ${cfg.material.palette} \
        > $out/theme.json
  '';
  materialColors = builtins.fromJSON (builtins.readFile "${materialColorsPkg}/theme.json");
in {
  options.theme = {
    name = mkOption {
      description = mdDoc "The active theme name.";
      type = types.enum ["yoru-edit"];
      default = "yoru-edit";
    };

    wallpaper = mkOption {
      description = mdDoc "The active theme wallpaper.";
      type = types.path;
      readOnly = true;
      default = let
        inherit (themeVariables) wallpaper;
      in
        if builtins.hasAttr "wallpaper" osCfg
        then
          (
            if osCfg.wallpaper != wallpaper
            then wallpaper
            else osCfg.wallpaper
          )
        else wallpaper;
    };

    colors = mkOption {
      description = mdDoc "The active theme colors";
      type = types.attrsOf (types.strMatching "[[:xdigit:]]{6}");
      readOnly = true;
      default = let
        inherit (themeVariables) colors;
      in
        if builtins.hasAttr "colors" osCfg
        then
          (
            if osCfg.colors != colors
            then colors
            else osCfg.colors
          )
        else colors;
    };

    material = {
      mode = mkOption {
        description = mdDoc "Type of theme material-colors-generator generates";
        type = types.enum ["amoled" "dark" "light"];
        default = "dark";
      };

      palette = mkOption {
        description = mdDoc "Type of theme material-colors-generator generates";
        type = types.enum ["adjacent" "default" "triadic"];
        default = "default";
      };

      colors = mkOption {
        inherit (pkgs.formats.json {}) type;
        description = mdDoc "The colors generated by material-colors-generator";
        readOnly = true;
        default = materialColors;
      };
    };
  };
}
